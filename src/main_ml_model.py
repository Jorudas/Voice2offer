
import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.pipeline import make_pipeline

# 1. Ä®keliame iÅ¡valytus duomenis
df = pd.read_csv("data/voice_data_clean.csv")

print("âœ… Duomenys Ä¯kelti sÄ—kmingai!\n")
print(df.head())

# 2. Patikriname stulpelius
print("\nStulpeliai:")
print(df.columns.tolist())

# 3. Patikriname, kiek turime Ä¯raÅ¡Å³
print(f"\nIÅ¡ viso Ä¯raÅ¡Å³: {len(df)}")

# 4. PasiruoÅ¡iame duomenis modeliui
X = df["transcription"]      # tekstas (Ä¯vestis)
y = df["tipas"]              # darbÅ³ tipas (etiketÄ—)

# 5. Sukuriame modelÄ¯ (TF-IDF + Naive Bayes)
model = make_pipeline(TfidfVectorizer(), MultinomialNB())

# 6. Apmokome modelÄ¯ (testinis reÅ¾imas)
model.fit(X, y)

print("\nâœ… Modelis sÄ—kmingai apmokytas (testinis reÅ¾imas)!")

import joblib

# 7. IÅ¡saugome apmokytÄ… modelÄ¯
model_path = "data/model.pkl"
joblib.dump(model, model_path)
print(f"\nğŸ’¾ Modelis iÅ¡saugotas Ä¯: {model_path}")

# 8. Sukuriame testinÄ¯ pavyzdÄ¯
naujas_tekstas = ["Reikia marmuro tinko 20 mÂ² sienai per savaitÄ™"]
prognoze = model.predict(naujas_tekstas)[0]

print(f"\nğŸ¤– PrognozÄ— naujam tekstui: {prognoze}")
